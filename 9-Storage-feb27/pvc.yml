# Dynamic volume provisioning allows persistent volumes to be created on-demand. Without dynamic provisioning, cluster administrators - 
# have to manually make calls to their cloud or storage provider to create new volumes, and then create PersistentVolume - 
# objects to represent them in Kubernetes. The dynamic provisioning feature eliminates the need for cluster administrators to - 
# pre-provision storage. Instead, it automatically provisions storage when it is requested by users.

# this pvc persists data that's written into db by the app. It's not for logs.

# k8s pod logs will be persisted to "logstash server" for our ops team for troubleshooting purpose using nfs storage class.
# app data will be persisted to mysqldb for app team to look. App team may also use nfs storage class to provision PV on-demand.

#In a production cluster, you would not use hostPath. Instead a cluster administrator would provision a network resource like a - 
# Google Compute Engine persistent disk, an NFS share, or an Amazon Elastic Block Store volume. Cluster administrators can also use - 
# StorageClasses to set up dynamic provisioning.


---
apiVersion: v1
kind: PersistentVolumeClaim
metadata: 
  name: mysql-claim    # call it by its name which is defined in rs.yml
spec:
  accessModes:
    - ReadWriteOnce   # refer other options written at the bottom
  storageClassName: gp2     # defaults to gp2    # you can give your nfs storageClassName: logstash-nfs
  resources:
    requests:     
      storage: 1Gi
    limits:
      storage: 2Gi
---


# inside spec, remember only accessModes & resources

# https://kubernetes.io/docs/concepts/storage/persistent-volumes/#types-of-persistent-volumes
# many pv types are deprecated (aws ebs, azure disk, azure file etc.) - 
# Hence, say that you use "nfs" as for creating pv's (ex:- https://kubernetes.io/docs/concepts/storage/volumes/#nfs)

# ReadWriteOnce
# the volume can be mounted as read-write by a single node. ReadWriteOnce access mode still can allow multiple pods to access - 
# the volume when the pods are running on the same node.

#ReadOnlyMany
# the volume can be mounted as read-only by many nodes.

# ReadWriteMany
# the volume can be mounted as read-write by many nodes.